name: Build NixOS Lima Image

on: [workflow_dispatch, push, pull_request]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-24.04, ubuntu-24.04-arm]
      fail-fast: false
    env:
      # HOST_ARCH value must match string in Lima download filename
      HOST_ARCH: ${{ matrix.os == 'ubuntu-24.04' && 'x86_64' || (matrix.os == 'ubuntu-24.04-arm' && 'aarch64') || 'unknown' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install qemu-utils
        run: |
          sudo apt-get update
          sudo apt-get install -y qemu-utils

      - name: Install Nix
        uses: cachix/install-nix-action@v30
        env:
          # Use env variable QEMU_SYSTEM_AARCH64 to override Lima's QEMU configuration on aarch64 host
          SYSTEM_FEATURES: ${{ env.HOST_ARCH == 'aarch64' && 'kvm aarch64-linux' || 'kvm' }}
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          extra_nix_config: |
            system-features = ${{ env.SYSTEM_FEATURES }}
          github_access_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Build ${{ env.HOST_ARCH }} Image
        run: |
          nix build .#packages.${{ env.HOST_ARCH }}-linux.img --out-link result-${{ env.HOST_ARCH }}
          # copy and compress the image (and give it a new name)
          qemu-img convert -O qcow2 -c result-${{ env.HOST_ARCH }}/nixos.qcow2 nixos-lima-unstable-${{ env.HOST_ARCH }}.qcow2

      - name: Upload ${{ env.HOST_ARCH }} image as artifact
        uses: actions/upload-artifact@v4
        with:
          name: nixos-lima-unstable-${{ env.HOST_ARCH }}
          path: nixos-lima-unstable-${{ env.HOST_ARCH }}.qcow2

  test-image:
    runs-on: ${{ matrix.os }}
    needs: build
    strategy:
      matrix:
        os: [ubuntu-24.04, macos-15]
        guest-arch: ['aarch64', 'x86_64']
        exclude:
          - os: 'macos-15'          # Does not support VZ or (hw accelerated) QEMU
            guest-arch: 'aarch64'
      fail-fast: false
    env:
      HOST_ARCH: ${{ matrix.os == 'ubuntu-24.04' && 'x86_64' || matrix.os == 'ubuntu-24.04-arm' && 'aarch64' || matrix.os == 'macos-15' && 'aarch64' || 'unknown' }}
      LIMA_VERSION: "v1.2.1"
      GUEST_HOST_NAME: "nixos"
      GUEST_USER: "lima"
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Download ${{ matrix.guest-arch }} image artifact
        uses: actions/download-artifact@v5
        with:
          name: nixos-lima-unstable-${{ matrix.guest-arch }}
          path: artifacts/
      - name: move and rename
        run: |
          mkdir -p result-${{ matrix.guest-arch }}
          mv artifacts/nixos-lima-unstable-${{ matrix.guest-arch }}.qcow2 result-${{ matrix.guest-arch }}/nixos.qcow2

      - name: Install Nix
        uses: cachix/install-nix-action@v31
        with:
          github_access_token: ${{ secrets.GITHUB_TOKEN }}

      # pre-build the shell separately to avoid skewing the run time of the next
      # step and have clear point of failure should the shell fail to build
      - name: Pre-build devShell
        run: nix build --no-link .#devShells.$(nix eval --impure --raw --expr 'builtins.currentSystem').default

      - name: "Cache ~/.cache/lima"
        uses: actions/cache@v4
        with:
          path: ~/.cache/lima
          key: os-${{ matrix.os }}-NixOS-Lima-${{ steps.lima-actions-setup.outputs.version }}-guest-${{ matrix.guest-arch }}

      - name: "Start an instance of NixOS"
        shell: 'nix develop -c bash -e {0}'
        env:
          # Use env variable QEMU_SYSTEM_AARCH64 to override Lima's QEMU configuration on aarch64 host
          QEMU_SYSTEM_AARCH64: ${{ env.HOST_ARCH == 'aarch64' && 'qemu-system-aarch64 -machine virt -cpu max' || 'qemu-system-aarch64' }}
        run: |
          set -eux
          limactl start --arch ${{ matrix.guest-arch }} --name=${{ env.GUEST_HOST_NAME }} --network=lima:user-v2 --set '.user.name = "${{ env.GUEST_USER }}"' nixos-result.yaml

      - name: "Update and Rebuild NixOS"
        shell: 'nix develop -c bash -e {0}'
        run: |
          set -eux
          limactl shell nixos -- nixos-rebuild boot --flake .#nixos-${{ matrix.guest-arch }} --sudo
          sleep 0.1
          limactl restart nixos

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: artifacts-os-${{ matrix.os }}-guest-${{ matrix.guest-arch }}-lima-errlog
          path: |
            ~/.lima/nixos/*
            !~/.lima/nixos/basedisk
            !~/.lima/nixos/diffdisk
